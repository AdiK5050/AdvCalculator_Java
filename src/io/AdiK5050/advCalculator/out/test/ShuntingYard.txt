package AdvCalculator.out.InputHandling;

import java.util.Scanner;
import java.util.NumberFormatException;
import java.util.HashMap;

public class ShuntingYard
{
    Scanner sc;
    public static final Map<String, Integer> precedence = new HashMap<>();
    public String input;
    public StringBuilder token = new StringBuilder();
    public String[] tokens;
    
    

    /*
    * another way to write :- 
        static
        {
        precedence.put("+" = 1);
        precedence.put("-" = 1);
        precedence.put("*" = 2);
        precedence.put("/" = 2);
        }
    */

    public ShuntingYard(Scanner sc)
    {
        this.sc = sc;
        precedence.put("+" = 1);
        precedence.put("-" = 1);
        precedence.put("*" = 2);
        precedence.put("/" = 2);
    }

    void expressionInput()
    {
        System.out.println("Enter the expression:- (For example 1 + 2 (3 * 4)...) ");
        input = sc.nextLine();
       
    }
    void tokenizing()
    {

    }
    boolean isNumber(char token)
    {
        try
        {
            while(!token.isDigit())
                if(token.isDigit() || token.equals('.'))
                {
                    tokens += token
                }
            Double.parseDouble(tokens);
            return true;
        }
        catch(NumberFormatException e)
        {
            return false;
        }
    }

    boolean isOperator(String token)
    {
        return precedencce.containsKey(token);
    }
    public void postfix()
    {
        Stack stack = new Stack();
        StringBuilder output = new StringBuilder();

        for(String token : tokens)
        {
            if(isNumber(token))
                output.append(token).append(" ");

            else if(isOperator(token))
            {
                while(!stack.empty() && isOperator(stack.peek()) && precedence.get(stack.peek) >= precedence.get(token))
                    output.append(stack.pop()).append(" ");
                stack.push(token);
            }
            else if()
                
        }
    }
}